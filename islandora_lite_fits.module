<?php

/**
 * @file
 * Contains islandora_lite_fits.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use GuzzleHttp\Client;
/**
 * Implements hook_help().
 */
function islandora_lite_fits_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the islandora_lite_fits module.
    case 'help.page.islandora_lite_fits':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module represent DSU&#039;&#039;s approach toward Fits in our Islandora Lite Stack') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function islandora_lite_fits_theme()
{
  return [
    'islandora_lite_fits' => [
      'render element' => 'children',
    ],
  ];
}

function islandora_lite_fits_node_presave($node)
{
  print_log("islandora_lite_fits_node_presave");

}

/**
 * Starting point of Phase 1 in Extract Fits in Islandora Lite Stack
 * @param $entity
 */
function islandora_lite_fits_entity_insert($entity) {
  print_log($entity->bundle());
  if (in_array($entity->bundle(),["file", "image", 'video','document'])) {
    $file = \Drupal\file\Entity\File::load($entity->id());
    if (isset($file)) {
      $fits_xml = getFits($file);
      $fits = simplexml_load_string($fits_xml);
      $fit_json = json_encode($fits);
      // store the whole fits to json field, use either one of theme. Choose after determine which one is better.
      $file->field_fits->setValue($fit_json);

      //$file->field_fits_fields->set(0, ['first' => 'version', 'second' => time()]);
      //$file->field_fits_fields->set(1, ['first' => 'checksum', 'second' => time()]);

      $index = 0;
      iteratingFitsJsonObj((array)$fits, $index, $file);

      // extract selective fields and save to other fields
      $file->save();
    }
  }
}

/**
 * Loop through Fits json and get all of attributes and values
 * https://www.opentechguides.com/how-to/article/php/205/php-nested-json.html
 * @param $arr
 * @param $index
 * @param $file
 */
function iteratingFitsJsonObj($arr, $index,$file){

  foreach ($arr as $key => $val) {
    if (is_object($val))
      $val = (array)$val;
    if (is_array($val)) {
      $index = iteratingFitsJsonObj($val, $index,$file);

    } else {
      print_log("$index: $key = $val");
      $file->field_fits_fields->set($index, ['first' => $key, 'second' => $val]);
      $index++;
    }
  }

  return $index;
}



function islandora_lite_fits_file_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  print_log("islandora_lite_fits_file_view");
  $file = \Drupal\file\Entity\File::load($entity->id());
  //$json = (array)json_decode($file->field_fits->getValue()[0]['value']);

}

/*
function computed_field_field_fits_version_compute($entity_type_manager, $entity, $fields, $delta)
{
  print_log("islandora_lite_fits_computed_field_field_fits_version_compute");
  if (isset($fields['field_full_fits_json']) && is_array($fields['field_full_fits_json']) && count($fields['field_full_fits_json']) > 0) {
    $fits = json_decode($fields['field_full_fits_jsonb'][0]['value']);
    $value = $fits->{"@attributes"}->version;

  }
  return $value;
}

function computed_field_field_fits_checksum_compute($entity_type_manager, $entity, $fields, $delta)
{
  print_log("islandora_lite_fits_computed_field_field_fits_checksum_compute");
  if (isset($fields['field_full_fits_json']) && is_array($fields['field_full_fits_json']) && count($fields['field_full_fits_json']) > 0) {
    $fits = json_decode($fields['field_full_fits_jsonb'][0]['value']);
    $value = $fits->{"fileinfo"}->md5checksum;
  }
  return $value;
}

function computed_field_field_fits_timestamp_compute($entity_type_manager, $entity, $fields, $delta)
{
  print_log("islandora_lite_fits_computed_field_field_fits_timestamp_compute");
  if (isset($fields['field_full_fits_json']) && is_array($fields['field_full_fits_json']) && count($fields['field_full_fits_json']) > 0) {
    $fits = json_decode($fields['field_full_fits_jsonb'][0]['value']);
    $value = $fits->{"@attributes"}->timestamp;
  }
  return $value;
}
*/

/**
 * Debug function: display any variable to error log
 *
 * @param $thing
 */
if (!function_exists('print_log')) {
  function print_log($thing)
  {
    error_log(print_r($thing, true), 0);
  }

}
/**
 * Debug function: display any variable to current webpage
 * @param $thing
 */
if (!function_exists('logging')) {
  function logging($thing)
  {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }
}

function getFits(\Drupal\file\Entity\File $file) {
  $options = [
    'base_uri' => "http://192.168.3.99:8080/fits/"
  ];

  $client = new Client($options);
  $response = $client->post('examine', [
    'multipart' => [
      [
        'name' => 'datafile',
        'filename' => $file->label(),
        'contents' => file_get_contents($file->getFileUri()),
      ],
    ]
  ]);
  print_log("testing");
  return $response->getBody()->getContents();
}

