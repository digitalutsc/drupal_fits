<?php

/**
 * @file
 * Contains fits.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use GuzzleHttp\Client;

/**
 * Implements hook_help().
 */
function fits_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the islandora_lite_fits module.
    case 'help.page.islandora_lite_fits':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module represent DSU&#039;&#039;s approach toward Fits in our Islandora Lite Stack') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function fits_theme()
{
  return [
    'islandora_lite_fits' => [
      'render element' => 'children',
    ],
  ];
}

function fits_node_presave($node)
{
  print_log("fits_node_presave");

}

/**
 * Implement hook_entity_insert
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
 */
function fits_entity_insert(Drupal\Core\Entity\EntityInterface $entity)
{
  print_log(fits_entity_insert);
  // only extract Fits for File level only
  if ($entity->getEntityType()->getLabel()->getUntranslatedString() === "File") {
    $file = \Drupal\file\Entity\File::load($entity->id());
    //save_fits_fields($file);
  }

}

/**
 * Implement hook_entity_update
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Core\TypedData\Exception\ReadOnlyException
 */
function fits_entity_update(Drupal\Core\Entity\EntityInterface $entity) {
  print_log(fits_entity_update);
  if ($entity->getEntityType()->getLabel()->getUntranslatedString() === "File") {
    //save_fits_fields($entity);
  }
}

/**
 * Implement hook_file_presave
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function fits_file_presave(Drupal\Core\Entity\EntityInterface $entity) {
  print_log(fits_file_presave);
}

/**
 * Implement hook_file_view
 *
 * @param array $build
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param $view_mode
 */
function fits_file_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode)
{
  print_log("fits_file_view");
  /*
  print_log("checksum: ". JmesPath\search('fileinfo.md5checksum', $fits));
  print_log("size: ". JmesPath\search('fileinfo.size', $fits));
  $jmespath = $file->field_fits_other->getFieldDefinition()->getDescription();
  print_log(JmesPath\search($jmespath, $fits));
  */

  /*$file = \Drupal\file\Entity\File::load($entity->id());

  print_log(getJmespath($file->field_fits_checksum->getFieldDefinition()->getDescription()));

  $fits = json_decode($file->field_fits->getValue()[0]['value']);
  print_log(JmesPath\search('identification.identity[0].""', $fits));*/
}

/**
 * Implement hook_form_FORM_ID_alter
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function fits_form_file_video_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  print_log("fits_form_file_video_edit_form_alter");
}

/**
 * Implement hook_form_FORM_ID_alter
 * Purpose: Modify the Help text field to repurpose its use to contain Jmespath
 * Only effect for Fits related field (must contain the word "fits" to it)
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function fits_form_field_config_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  // get all available file types
  $fileTypes = \Drupal::entityTypeManager()
    ->getStorage('file_type')
    ->loadMultiple();
  $fileTypes = array_keys($fileTypes);

  // get a need key component to detect fits related fields
  $parts = explode("/", \Drupal::service('path.current')->getPath());
  $currentFileEntity = $parts[5];
  $field =  $parts[count($parts) -1];

  // limit JmesPath field modification for Fits related
  if (in_array($currentFileEntity, $fileTypes) && strpos($field, "_fits_") !== false) {
    $form['description']['#title'] = t("One or more valid JMESPaths.");
    $form['description']['#description'] = t("<p>JMespath(s) will be evaluated against Fits JSON field to extract data. For multiple, enter them each line. <u>ie</u> Extract Image width from FITS - JMESPath: <code>metadata:image:imageWidth</code>
    <br />For further details about JMESPath, please visit: <a href='https://jmespath.org/tutorial.html' target='_blank'>https://jmespath.org/tutorial.html</a> </p>");
  }
}

/**
 * Implement hook_form_FORM_ID_alter
 * Purpose: to leave a note for use case
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function fits_form_field_ui_field_storage_add_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // get all available file types
  $fileTypes = \Drupal::entityTypeManager()
    ->getStorage('file_type')
    ->loadMultiple();
  $fileTypes = array_keys($fileTypes);

  // get a need key component to detect fits related fields
  $parts = explode("/", \Drupal::service('path.current')->getPath());
  $currentFileEntity = $parts[5];

  if (in_array($currentFileEntity, $fileTypes)) {
    $form['note-for-fits'] = [
      '#markup' => t('<strong>Important Note</strong>: If you are adding textfield(s) for Fits extraction with JMESPath, please make sure to have <code>_fits_</code> in the field\'s machine name (ie. <cdoe>field_fits_file_size</cdoe>)'),
    ];
  }

}

/**
 * Analyze field's description text and get Jmespath
 *
 * @param $jmespath
 * @return mixed|string[]
 */
function getJmespath($jmespath) {
  if(strstr($jmespath, "\n")) {
    return explode("\n", $jmespath);
  }
  return $jmespath;
}

/**
 * From Jmespath(s), Get value of field from Fits json
 * @param $path is Jmespath but can set as either a string or array
 */
function jmesPathSearch($path, $fits) {
  if (is_array($path)) {
    $value = "";
    foreach ($path as $p) {
      $value = JmesPath\search($p, $fits);
      if (!empty($value)) {
        break;
      }
    }
    return $value;
  }
  return JmesPath\search($path, $fits);
}

/**
 * [Unused] Loop through Fits json and get all of attributes and values
 * Call: iteratingFitsJsonObj((array)$fits, $index, $file);
 * https://www.opentechguides.com/how-to/article/php/205/php-nested-json.html
 * @param $arr
 * @param $index
 * @param $file
 */
function iteratingFitsJsonObj($arr, $index, $file)
{

  foreach ($arr as $key => $val) {
    if (is_object($val))
      $val = (array)$val;
    if (is_array($val)) {
      $index = iteratingFitsJsonObj($val, $index, $file);

    } else {
      //print_log("$index: $key = $val");
      $file->field_fits_fields->set($index, ['first' => $key, 'second' => $val]);
      $index++;
    }
  }

  return $index;
}


/**
 * Debug function: display any variable to error log
 *
 * @param $thing
 */
if (!function_exists('print_log')) {
  function print_log($thing)
  {
    error_log(print_r($thing, true), 0);
  }

}
/**
 * Debug function: display any variable to current webpage
 * @param $thing
 */
if (!function_exists('logging')) {
  function logging($thing)
  {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }
}


